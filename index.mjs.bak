import { loadStdlib } from '@reach-sh/stdlib';
import * as backend from './build/index.main.mjs';
import { ask } from '@reach-sh/stdlib';
const stdlib = loadStdlib(process.env);


if (process.argv.length < 3 || ['trader', 'offTaker'].includes(process.argv[2]) == false) {
  console.log('Usage: reach run index [trader|offTaker]');
  process.exit(0);
}

const role = process.argv[2];
console.log(`You are ${role}`);



console.log(`The consensus network is ${stdlib.connector}.`);
const suStr = stdlib.standardUnit;
const auStr = stdlib.atomicUnit;

const toAU = (su) => stdlib.parseCurrency(su);
const toSU = (au) => stdlib.formatCurrency(au, 4);
const iBalance = toAU(700);
const showBalance = async (acc) => console.log(`Your balance is ${toSU(await stdlib.balanceOf(acc))} ${suStr}.`);

const commonInteract = (role) => ({
  reportCancellation: () => { console.log(`${role == 'offTaker' ? 'You' : 'The offTaker'} cancelled the order.`); },
  reportPayment: (payment) => { console.log(`${role == 'offTaker' ? 'You' : 'The offTaker'} paid ${toSU(payment)} ${suStr} to the contract.`) },
  reportTransfer: (payment) => { console.log(`The contract paid ${toSU(payment)} ${suStr} to ${role == 'trader' ? 'you' : 'the trader'}.`) }
});

// trader
if (role === 'trader') {

  const traderInteract = {

    ...commonInteract(role),
    price: toAU(5),

    property: await ask.ask('What do you trade on, or press Enter for property sale:', (s) => {
      let w = !s ? 'Three bedroom duplex.' : s;
      if (!s) { console.log(w); }
      return w;
    }),

    reportReady: async (price) => {
      console.log(`Item for sale at ${toSU(price)} ${suStr}.`);
      console.log(`Contract info: ${JSON.stringify(await ctc.getInfo())}`);
    },

  };

  const acc = await stdlib.newTestAccount(iBalance);
  await showBalance(acc);
  const ctc = acc.contract(backend);
  await ctc.participants.trader(traderInteract);
  await showBalance(acc);

  // offTaker
} else {
  const offTakerInteract = {
    ...commonInteract(role),
    reportproperty: (property) => console.log(`Your product is "${property}"`),
    confirmPurchase: async (price) => await ask.ask(`Interested to deal ${toSU(price)} ${suStr}?`, ask.yesno),
  };

  const acc = await stdlib.newTestAccount(iBalance);
  const info = await ask.ask('Paste contract info:', (s) => JSON.parse(s));
  const ctc = acc.contract(backend, info);
  const price = await ctc.views.Main.price();
  console.log(`The price of property is ${price[0] == 'None' ? '0' : toSU(price[1])} ${suStr}.`);
  await showBalance(acc);
  await ctc.p.offTaker(offTakerInteract);
  await showBalance(acc);

};

ask.done();